#!/bin/zsh

CONFIG_DIR="$HOME/.config/"
ZSH_TEMPLATE="$CONFIG_DIR/zsh/config/zshrc-template"
ZSH_BACKUP_DIR="$CONFIG_DIR/zsh/backups"
OH_MY_ZSH_DIR="$HOME/.oh-my-zsh"

# ==================== FUN√á√ïES ====================
function install_oh_my_zsh() {
    echo "üöÄ Iniciando instala√ß√£o do Oh My Zsh..."

    # Verificar se o curl est√° instalado
    if ! command -v curl &> /dev/null; then
        echo "‚ùå curl n√£o encontrado. Instalando..."
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt update && sudo apt install -y curl
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            if command -v brew &> /dev/null; then
                brew install curl
            else
                echo "‚ùå Homebrew n√£o encontrado. Instale o curl manualmente."
                exit 1
            fi
        else
            echo "‚ùå Sistema n√£o suportado. Instale o curl manualmente."
            exit 1
        fi
    fi

    # Verificar se o zsh est√° instalado
    if ! command -v zsh &> /dev/null; then
        echo "‚ùå zsh n√£o encontrado. Instalando..."
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            sudo apt install -y zsh
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS j√° vem com zsh, mas vamos verificar
            echo "‚ÑπÔ∏è  macOS geralmente j√° tem zsh instalado"
        fi
    fi

    # Mudar para o diret√≥rio dotfiles (opcional)
    if [ -d "$CONFIG_DIR" ]; then
        cd "$CONFIG_DIR"
        echo "üìÅ Diret√≥rio alterado para: $CONFIG_DIR"
    fi

    # Instalar Oh My Zsh
    echo "üì¶ Instalando Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

    # Verificar se a instala√ß√£o foi bem-sucedida
    if [ -d "$HOME/.config/dotfiles/oh-my-zsh" ]; then
        echo "‚úÖ Oh My Zsh instalado com sucesso!"
        
        # Configura√ß√µes adicionais opcionais
        echo "‚öôÔ∏è  Configura√ß√µes adicionais..."
        
        # Backup do zshrc original se existir
        if [ -f "$HOME/.zshrc" ]; then
            cp "$HOME/.zshrc" "$HOME/.zshrc.backup.$(date +%Y%m%d_%H%M%S)"
            echo "üìã Backup do .zshrc criado"
        fi
        
        # Link simb√≥lico para seu zshrc personalizado (se voc√™ tiver um)
        if [ -f "$CONFIG_DIR/.zshrc" ]; then
            ln -sf "$CONFIG_DIR/.zshrc" "$HOME/.zshrc"
            echo "üîó .zshrc personalizado linkado"
        fi
        
        echo ""
        echo "üéâ Instala√ß√£o conclu√≠da!"
        echo ""
    else
        echo "‚ùå Falha na instala√ß√£o do Oh My Zsh"
        exit 1
    fi
}

function clean_oh_my_zsh_backups() {
    local backup_patterns=(
        ".zshrc.pre-oh-my-zsh"
        ".zshrc.pre-oh-my-zsh-*"
        ".zshrc.pre-oh-my-zsh.*"
    )
    
    local removed_count=0
    
    for pattern in "${backup_patterns[@]}"; do
        for file in "$CONFIG_DIR"/zsh/$pattern; do
            if [ -f "$file" ] || [ -e "$file" ]; then
                rm -f "$file"
                echo "üóëÔ∏è  Removido: $file"
                ((removed_count++))
            fi
        done
    done
    
    if [ $removed_count -eq 0 ]; then
        echo "‚úÖ Nenhum backup antigo encontrado"
    else
        echo "üóëÔ∏è  Total de backups removidos: $removed_count"
    fi
}

function substitute_zshrc() {
    if [ -f "$ZSH_TEMPLATE" ]; then
        cp "$ZSH_TEMPLATE" "$CONFIG_DIR/zsh/.zshrc"
        echo "üîÑ .zshrc substitu√≠do pelo template"
    else
        echo "‚ùå Template de zshrc n√£o encontrado em $ZSH_TEMPLATE"
    fi
}

# ==================== FUN√á√ÉO MAIN ====================
function main() {
  install_oh_my_zsh
  clean_oh_my_zsh_backups
  substitute_zshrc
}

main "$@"
